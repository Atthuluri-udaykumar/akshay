import React, { useEffect, useState } from "react";
import { Autocomplete, Checkbox, CircularProgress, TextField } from "@mui/material";
import CheckBoxIcon from '@mui/icons-material/CheckBox';
import CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';
import Chip from '@mui/material/Chip';
const icon = <CheckBoxOutlineBlankIcon fontSize="small" />;
const checkedIcon = <CheckBoxIcon fontSize="small" />;

export interface IMultiSelectDropdownProps {
    value?: any[];
    label?: string;
    loading?:boolean;
    disabled?: boolean;
    helperText?: string;
    placeholder?: string;
    options: any[];
    limitTags?:number;
    error?: boolean;
    required?: boolean;
    fixedSelectedOptions?:any[];
    onChange: (value: any) => void;
    getOptionLabel: (option: any) => string;
    isOptionEqualToValue: (option:any, value:any) => boolean;
    disableClearable? : boolean
  }

const MultiSelectDropdown = (props:IMultiSelectDropdownProps)=>{
const {options, value,label, loading,disabled, helperText, error,  placeholder, limitTags,required,fixedSelectedOptions, onChange ,getOptionLabel, isOptionEqualToValue,disableClearable=false} = props;
const [open, setOpen] = useState(false);

const closeDropdown = () =>{
    setOpen(false)
}
const openDropdown = () =>{
    setOpen(true)
}
    return (
            <div onMouseLeave={closeDropdown} onBlur={closeDropdown} style={{ minWidth: 300, maxWidth: 300, margin: 20 }}>
                <Autocomplete
                    multiple
                    disabled={disabled}
                    limitTags={limitTags}
                    options={options.filter( (option) => 
                        !fixedSelectedOptions?.find( fixed => fixed.optionId === option.optionId))}
                    value={value}
                    getOptionLabel={getOptionLabel}
                    disableClearable ={disableClearable}
                    isOptionEqualToValue={isOptionEqualToValue} //this function we use to suppress the warning generated by material
                    onChange={(evt, value) => onChange(value)}
                    open={open}
                    onBlur={closeDropdown}
                    disableCloseOnSelect={true}
                    renderOption={(props, option, { selected }) => (
                        <li {...props}>
                          <Checkbox
                            icon={icon}
                            checkedIcon={checkedIcon}
                            style={{ marginRight: 8 }}
                            checked={selected}
                          />
                          {option.optionText}                          
                        </li>
                    )}
                    renderTags={(tagValue, getTagProps) =>
                        tagValue.map((option, index) => (
                          <Chip
                            label={option.optionText}
                            {...getTagProps({ index })}
                            disabled={fixedSelectedOptions ? fixedSelectedOptions?.indexOf(option) !== -1 : false}
                          />
                        ))
                      }
                    renderInput={(params) => (
                        <TextField
                            onClick={openDropdown}
                            onChange={openDropdown}
                            {...params}
                            label={label}
                            margin="normal"
                            variant="standard"
                            helperText={helperText}
                            placeholder={placeholder}
                            error={error}
                            required={required}
                            InputProps={{
                                ...params.InputProps,
                                endAdornment: (
                                <React.Fragment>
                                    {loading ? (
                                    <CircularProgress color="inherit" size={20} />
                                    ) : null}
                                    {params.InputProps.endAdornment}
                                </React.Fragment>
                                ),
                            }}
                        />
                    )}
                />
            </div>
            
            )

}

export default MultiSelectDropdown;